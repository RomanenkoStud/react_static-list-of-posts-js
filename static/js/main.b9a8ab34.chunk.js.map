{"version":3,"sources":["components/UserInfo/UserInfo.jsx","components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["UserInfo","user","email","name","className","href","CommentInfo","comment","body","CommentList","comments","map","id","PostInfo","post","title","length","PostList","posts","postsFromServer","usersFromServer","find","userId","commentsFromServer","filter","postId","App","ReactDOM","render","document","getElementById"],"mappings":"i28IAEaA,EAAW,SAAC,GAAD,QACtBC,KAAQC,EADc,EACdA,MAAOC,EADO,EACPA,KADO,OAGtB,mBAAGC,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGC,KCJQG,G,MAAc,SAAC,GAAD,QACzBC,QAAWJ,EADc,EACdA,KAAMD,EADQ,EACRA,MAAOM,EADC,EACDA,KADC,OAGzB,sBAAKJ,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SACGD,IAGF,OAED,mBACEC,UAAU,qBACVC,KAAI,iBAAYH,GAFlB,SAIGA,OAIL,qBAAKE,UAAU,oBAAf,SACGI,SClBMC,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKN,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,SACGM,EAASC,KAAI,SAAAJ,GAAO,OACnB,oBAAqBH,UAAU,oBAA/B,SACE,cAAC,EAAD,CAAaG,QAASA,KADfA,EAAQK,aCJZC,G,MAAW,SAAC,GAAD,QACtBC,KAAQC,EADc,EACdA,MAAOP,EADO,EACPA,KAAMP,EADC,EACDA,KAAMS,EADL,EACKA,SADL,OAGtB,sBAAKN,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCW,IAEjC,8BACG,eAED,cAAC,EAAD,CAAUd,KAAMA,UAIpB,mBAAGG,UAAU,iBAAb,SACGI,IAGH,uBAEqB,IAApBE,EAASM,OACL,mBAAG,UAAQ,oBAAX,6BACA,cAAC,EAAD,CAAaN,SAAUA,SCtBnBO,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKd,UAAU,WAAf,SACE,oBAAIA,UAAU,iBAAd,SACGc,EAAMP,KAAI,SAAAG,GAAI,OACb,oBAAkBV,UAAU,iBAA5B,SACE,cAAC,EAAD,CAAUU,KAAMA,KADTA,EAAKF,a,qBCDhBM,EAAQC,EAAgBR,KAAI,SAAAG,GAAI,kCAE/BA,GAF+B,IAGlCb,KAAMmB,EAAgBC,MAAK,SAAApB,GAAI,OAAIA,EAAKW,KAAOE,EAAKQ,UACpDZ,SAAUa,EAAmBC,QAAO,SAAAjB,GAAO,OAAIA,EAAQkB,SAAWX,EAAKF,WAI9Dc,EAAM,kBACjB,0BAAStB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCAEA,cAAC,EAAD,CAAUc,MAAOA,QCfrBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b9a8ab34.chunk.js","sourcesContent":["import './UserInfo.scss';\n\nexport const UserInfo = ({\n  user: { email, name },\n}) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import './CommentInfo.scss';\n\nexport const CommentInfo = ({\n  comment: { name, email, body },\n}) => (\n  <div className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">\n        {name}\n      </strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${email}`}\n      >\n        {email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {body}\n    </div>\n  </div>\n);\n","import PropTypes from 'prop-types';\nimport { CommentInfo } from '../CommentInfo';\nimport './CommentList.scss';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    <ul className=\"CommentList__list\">\n      {comments.map(comment => (\n        <li key={comment.id} className=\"CommentList__item\">\n          <CommentInfo comment={comment} />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import { UserInfo } from '../UserInfo';\nimport { CommentList } from '../CommentList';\nimport './PostInfo.scss';\n\nexport const PostInfo = ({\n  post: { title, body, user, comments },\n}) => (\n  <div className=\"PostInfo\">\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">{title}</h3>\n\n      <p>\n        {' Posted by  '}\n\n        <UserInfo user={user} />\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {body}\n    </p>\n\n    <hr />\n\n    {comments.length === 0\n      ? (<b data-cy=\"NoCommentsMessage\">No comments yet</b>)\n      : (<CommentList comments={comments} />)\n    }\n  </div>\n);\n","import PropTypes from 'prop-types';\nimport { PostInfo } from '../PostInfo';\nimport './PostList.scss';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    <ul className=\"PostList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostList__item\">\n          <PostInfo post={post} />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nconst userShape = PropTypes.shape({\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n});\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      user: userShape.isRequired,\n    }),\n  ).isRequired,\n};\n","import './App.scss';\nimport { PostList } from './components/PostList';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nconst posts = postsFromServer.map(post => (\n  {\n    ...post,\n    user: usersFromServer.find(user => user.id === post.userId),\n    comments: commentsFromServer.filter(comment => comment.postId === post.id),\n  }\n));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}